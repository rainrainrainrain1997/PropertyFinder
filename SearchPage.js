'use strict';import  React,{Component} from 'react';import {    StyleSheet,    Text,    TextInput,    View,    Button,    ActivityIndicator,    Image,    Picker,    Alert,    ScrollView,} from 'react-native'import SearchResults from './SearchResults';import UnknownPlaces from './UnknownPlaces';import KeyboardSpacer from "react-native-keyboard-spacer";import ReactNative from 'react-native';import newPage from "./newPage";function urlForQueryAndPage(key, value, pageNumber) {    const data = {        country: 'uk',        pretty: '1',        encoding: 'json',        listing_type: 'buy',        action: 'search_listings',        page: pageNumber,    };    data[key] = value;    const querystring = Object.keys(data)        .map(key => key + '=' + encodeURIComponent(data[key]))        .join('&');    return 'https://api.nestoria.co.uk/api?' + querystring;}export  default  class SearchPage extends Component<{}> {    constructor(props){        super(props);        this.state ={            searchString:'london',            isLoading: false,            message: '',        }    }    _onSearchTextChanged = (event) => {        this.setState({ searchString: event.nativeEvent.text });    }    _handleResponse = (response) => {        this.setState({isLoading: false, message: ''});        if (response.application_response_code.substr(0, 1) === '1'){            this.props.navigator.push({                title: 'Results',                component: SearchResults,                passProps: {listings: response.listings}            });        }else{            this.setState({message: 'Location not recognized; please try again.'});            Alert.alert('Oops', this.state.message);        }    }    _excuteQuery = (query) => {        console.log(query);        this.setState({isLoading: true});        fetch(query)            .then(response => response.json())            .then(json => this._handleResponse(json.response))            .catch((error) => {                this.setState({                    isLoading: false,                    message: 'Something bad happened ' + error                });                Alert.alert('Oops', this.state.message);            });    }    _onSearchPressed = () => {        const query = urlForQueryAndPage('place_name',this.state.searchString,1);        this._excuteQuery(query);    }    _enterUnknownPlaces  ()  {        this.props.navigator.push({            title: 'Results',            component: UnknownPlaces,            passProps:{myProp: 'KNOWWHERE'},        });    }    _enterNewpage () {        this.props.navigator.push({           title: 'new page',            component: newPage,        });    }    scrollViewTo(e){        let target = e.nativeEvent.target;        let scrollLength = 0;//初始值        if (target=== ReactNative.findNodeHandle(this.refs.hour)) {            scrollLength = 216;        }        this.refs.scroll.scrollTo({y:scrollLength,x:0});        console.log('scrollFinish');    }    render(){        const spinner = this.state.isLoading ?            <ActivityIndicator size='large'/> : null;        return(            <ScrollView ref='scroll' keyboardShouldPersistTaps='always' >                <View onStartShouldSetResponderCapture={(e) => {                    let target = e.nativeEvent.target;                    if (target !== ReactNative.findNodeHandle(this.refs.hour) ) {                        this.refs.hour.blur();                    }                }}>                    <View style={styles.container}>                        <Text style={styles.description}>                            Search for houses to buy!                        </Text>                        <Text style={styles.description}>                            Search by place-name or postcode.                        </Text>                        <View style={styles.flowRight}>                            <TextInput                                style={styles.searchInput}                                value={this.state.searchString}                                onChange={this._onSearchTextChanged}                                placeholder='Search via name or postcode'/>                            <Button onPress={this._onSearchPressed} color='#48BBEC' title='GO'/>                        </View>                        <Image source={require('./Resources/house.png')} style={styles.image}/>                        {spinner}                        <Button                            onPress={()=>this._enterUnknownPlaces()}                            color ='#48BBEC'                            title='EnterUnknownPlaces'                        />                        <Picker                            style={styles.picker}                            selectedValue={this.state.searchString}                            onValueChange={(itemValue, itemIndex) => this.setState({searchString: itemValue})}>                            <Picker.Item label="London" value="London"/>                            <Picker.Item label="Manchester" value="Manchester"/>                            <Picker.Item label="Oxford" value="Oxford"/>                            <Picker.Item label="Birmingham" value="Birmingham"/>                            <Picker.Item label="Lancaster" value="Lancaster"/>                            <Picker.Item label="Liverpool" value="Liverpool"/>                            <Picker.Item label="Nottingham" value="Nottingham"/>                            <Picker.Item label="Salford" value="Salford"/>                            <Picker.Item label="Wells" value="Wells"/>                            <Picker.Item label="York" value="York"/>                            <Picker.Item label="Edinburgh" value="Edinburgh"/>                            <Picker.Item label="Swansea" value="Swansea"/>                        </Picker>                        <View style={styles.flowRight}>                            <TextInput                                style={styles.searchInput}                                value={this.state.searchString}                                onChange={this._onSearchTextChanged}                                placeholder='Search via name or postcode'                                keyboardType="numeric"                                ref = 'hour'                                onFocus={this.scrollViewTo.bind(this)}                                onEndEditing={()=>{this.refs.scroll.scrollTo({y:0,x:0,animated:true})}} />                        </View>                    </View>                </View>            </ScrollView>        );    }}const styles = StyleSheet.create({   description:{       marginBottom: 20,       fontSize: 18,       textAlign: 'center',       color: '#656565'   },   container:{       padding:30,       marginTop:65,       alignItems:'center',       flex: 1,   },    flowRight:{       flexDirection:'row',       alignItems:'center',       alignSelf:'stretch',    },    searchInput:{       height:36,       padding:4,       marginRight:5,       flexGrow:1,       fontSize:18,       borderWidth:1,       borderColor:'#48BBEC',       borderRadius:8,       color:'#48BBEC',    },    image:{        width: 217,        height:138,    },    picker:{        width:200,        height:50,    },});